"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
function activate(modelPath) {
    const ts = vscode.extensions.getExtension('vscode.typescript-language-features');
    if (ts && ts.exports) {
        const tsApi = ts.exports.getAPI(0);
        if (tsApi) {
            tsApi.onCompletionAccepted((item) => sendCompletionTelemetry(item));
            tsApi.configurePlugin("@vsintellicode/typescript-intellicode-plugin", { modelPath: modelPath });
        }
    }
    else {
        vscode.commands.executeCommand('_typescript.configurePlugin', "@vsintellicode/typescript-intellicode-plugin", { modelPath: modelPath });
    }
}
exports.activate = activate;
function sendCompletionTelemetry(item) {
    const metadata = item.metadata;
    if (metadata) {
        const partialProperties = extractCompletionTelemetry(item, metadata);
        if (partialProperties) {
            const properties = Object.assign({}, partialProperties, { Language: "typescript" });
            vscode.commands.executeCommand('vsintellicode.completionItemSelected', properties);
        }
    }
}
function extractCompletionTelemetry(item, metadata) {
    const itemMetadata = metadata.ItemMetadata[item.label];
    if (itemMetadata) {
        const properties = {
            Index: itemMetadata.Index.toString(),
            Id: itemMetadata.Id,
            Method: itemMetadata.Method,
            IsIntelliCodeCommit: (itemMetadata.Index < metadata.Count) ? "true" : "false",
            ModelVersion: metadata.ModelVersion,
            Count: metadata.Count.toString(),
            ModelType: metadata.ModelType,
            FailureReason: metadata.FailureReason,
            Class: metadata.Class,
            InIf: metadata.InIf ? "true" : "false",
            ElapsedTime: metadata.ElapsedTime.toString(),
            Methods: metadata.Methods.join('|'),
            PrevInvoc: metadata.PrevInvoc
        };
        return properties;
    }
}
