"use strict";
/*! Copyright (c) Microsoft Corporation. All rights reserved. */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __importStar(require("vscode"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const genericErrorMessage = "Cannot start IntelliCode support for Python. See output window for more details.";
class PythonSupport {
    getRequestedConfig() {
        return [{
                scopeName: "python",
                settingName: "jediEnabled",
                desiredValue: false,
                required: true,
                scopesToTry: [
                    vscode.ConfigurationTarget.Global,
                    vscode.ConfigurationTarget.Workspace,
                    vscode.ConfigurationTarget.WorkspaceFolder
                ],
                reloadWindowAfterApplying: true,
                notificationMessage: "IntelliCode Python support requires you to use the Microsoft Python Language Server (preview).",
                actionLabel: "Enable it and Reload Window"
            }];
    }
    async activate(api, logger) {
        let model = await api.ModelAcquisitionService
            .getModelProvider("python", "intellisense-members")
            .getModelAsync();
        if (model === undefined) {
            logger("No model available for Python, cannot continue.");
            return Promise.resolve();
        }
        let modelJson = JSON.stringify(model);
        logger(`vs-intellicode-python was passed a model: ${modelJson}.`);
        let assemblyPath = path_1.default.join(__dirname, "IntellicodeForPython.dll");
        try {
            fs_1.default.accessSync(assemblyPath, fs_1.default.constants.F_OK);
        }
        catch (err) {
            logger(`Python Language Server extension assembly doesn't exist in ${assemblyPath}. Please reinstall IntelliCode.`);
            return Promise.reject(err);
        }
        const pythonExtension = vscode.extensions.getExtension("ms-python.python");
        if (!pythonExtension) {
            const err = "Microsoft Python extension is not installed.";
            logger(err);
            return Promise.reject(err);
        }
        if (!pythonExtension.isActive) {
            const api = await pythonExtension.activate();
            await api.ready;
        }
        let command = vscode.commands.executeCommand("python._loadLanguageServerExtension", {
            assembly: assemblyPath,
            typeName: "Microsoft.PythonTools.Analysis.Pythia.LanguageServerExtensionProvider",
            properties: {
                modelPath: model.modelPath
            }
        });
        if (command == null) {
            logger("Couldn't find language server extension command. Is the installed version of Python 2018.7.0 or later?");
            return Promise.reject(new Error(genericErrorMessage));
        }
        await command;
        logger("Loaded language server extension.");
        return Promise.resolve();
    }
}
exports.PythonSupport = PythonSupport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnNjb2RlLWludGVsbGljb2RlLXB5dGhvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92c2NvZGUtaW50ZWxsaWNvZGUtcHl0aG9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnRUFBZ0U7Ozs7Ozs7Ozs7OztBQUVoRSwrQ0FBaUM7QUFFakMsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUVwQixNQUFNLG1CQUFtQixHQUFXLGtGQUFrRixDQUFDO0FBRXZIO0lBRUksa0JBQWtCO1FBQ2QsT0FBTyxDQUFDO2dCQUNKLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixXQUFXLEVBQUUsYUFBYTtnQkFDMUIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFdBQVcsRUFBRTtvQkFDVCxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTTtvQkFDakMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7b0JBQ3BDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlO2lCQUM3QztnQkFDRCx5QkFBeUIsRUFBRSxJQUFJO2dCQUMvQixtQkFBbUIsRUFBRSxnR0FBZ0c7Z0JBQ3JILFdBQVcsRUFBRSw2QkFBNkI7YUFDN0MsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBcUIsRUFBRSxNQUE0QjtRQUU5RCxJQUFJLEtBQUssR0FBc0MsTUFBTSxHQUFHLENBQUMsdUJBQXVCO2FBQzNFLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQzthQUNsRCxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDckIsTUFBTSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7WUFDMUQsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDNUI7UUFFRCxJQUFJLFNBQVMsR0FBWSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyw2Q0FBNkMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUVsRSxJQUFJLFlBQVksR0FBVyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQzVFLElBQUk7WUFDQSxZQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxZQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLENBQUMsOERBQThELFlBQVksaUNBQWlDLENBQUMsQ0FBQztZQUNwSCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUI7UUFJRCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDbEIsTUFBTSxHQUFHLEdBQUcsOENBQThDLENBQUM7WUFDM0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1osT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO1FBR0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUU7WUFDM0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDN0MsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ25CO1FBRUQsSUFBSSxPQUFPLEdBQTZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLHFDQUFxQyxFQUFFO1lBQzFHLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFFBQVEsRUFBRSx1RUFBdUU7WUFDakYsVUFBVSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUzthQUM3QjtTQUNKLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtZQUNqQixNQUFNLENBQUMsd0dBQXdHLENBQUMsQ0FBQztZQUNqSCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsTUFBTSxPQUFPLENBQUM7UUFDZCxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUM1QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0o7QUExRUQsc0NBMEVDIn0=