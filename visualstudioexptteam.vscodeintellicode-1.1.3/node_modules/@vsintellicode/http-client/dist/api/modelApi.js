"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const localVarRequest = require("request");
const models_1 = require("../model/models");
let defaultBasePath = 'https://prod.intellicode.vsengsaas.visualstudio.com';
var ModelApiApiKeys;
(function (ModelApiApiKeys) {
    ModelApiApiKeys[ModelApiApiKeys["Bearer"] = 0] = "Bearer";
})(ModelApiApiKeys = exports.ModelApiApiKeys || (exports.ModelApiApiKeys = {}));
class ModelApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'Bearer': new models_1.ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ModelApiApiKeys[key]].apiKey = value;
    }
    apiV1ModelByModelIdCodebasePost(modelId, modelCodebaseRequest, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/codebase'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdCodebasePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(modelCodebaseRequest, "ModelCodebaseCreateRequest")
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelCodebaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdDelete(modelId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdGet(modelId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdInputByInputIdActionNotifyDatauploadcompletePut(modelId, inputId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/input/{inputId}/action/notify/datauploadcomplete'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)))
            .replace('{' + 'inputId' + '}', encodeURIComponent(String(inputId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdInputByInputIdActionNotifyDatauploadcompletePut.');
        }
        if (inputId === null || inputId === undefined) {
            throw new Error('Required parameter inputId was null or undefined when calling apiV1ModelByModelIdInputByInputIdActionNotifyDatauploadcompletePut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdInputByInputIdGet(modelId, inputId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/input/{inputId}'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)))
            .replace('{' + 'inputId' + '}', encodeURIComponent(String(inputId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdInputByInputIdGet.');
        }
        if (inputId === null || inputId === undefined) {
            throw new Error('Required parameter inputId was null or undefined when calling apiV1ModelByModelIdInputByInputIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelInputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdInputPost(modelId, modelInputRequest, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/input'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdInputPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(modelInputRequest, "ModelInputCreateRequest")
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelInputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdOutputByOutputIdActionNotifyDatauploadcompletePut(modelId, outputId, details, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/output/{outputId}/action/notify/datauploadcomplete'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)))
            .replace('{' + 'outputId' + '}', encodeURIComponent(String(outputId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdOutputByOutputIdActionNotifyDatauploadcompletePut.');
        }
        if (outputId === null || outputId === undefined) {
            throw new Error('Required parameter outputId was null or undefined when calling apiV1ModelByModelIdOutputByOutputIdActionNotifyDatauploadcompletePut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(details, "ModelOutputTrainingDetails")
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdOutputByOutputIdGet(modelId, outputId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/output/{outputId}'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)))
            .replace('{' + 'outputId' + '}', encodeURIComponent(String(outputId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdOutputByOutputIdGet.');
        }
        if (outputId === null || outputId === undefined) {
            throw new Error('Required parameter outputId was null or undefined when calling apiV1ModelByModelIdOutputByOutputIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdOutputLatestGet(modelId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/output/latest'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdOutputLatestGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelByModelIdTrainPost(modelId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/{modelId}/train'
            .replace('{' + 'modelId' + '}', encodeURIComponent(String(modelId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (modelId === null || modelId === undefined) {
            throw new Error('Required parameter modelId was null or undefined when calling apiV1ModelByModelIdTrainPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelCommonByLanguageByAnalyzerOutputLatestGet(language, analyzer, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model/common/{language}/{analyzer}/output/latest'
            .replace('{' + 'language' + '}', encodeURIComponent(String(language)))
            .replace('{' + 'analyzer' + '}', encodeURIComponent(String(analyzer)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling apiV1ModelCommonByLanguageByAnalyzerOutputLatestGet.');
        }
        if (analyzer === null || analyzer === undefined) {
            throw new Error('Required parameter analyzer was null or undefined when calling apiV1ModelCommonByLanguageByAnalyzerOutputLatestGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelOutputDetailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    apiV1ModelPost(modelCreateRequest, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api/v1/model';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(modelCreateRequest, "ModelCreateRequest")
        };
        this.authentications.Bearer.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, "ModelResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ModelApi = ModelApi;
//# sourceMappingURL=modelApi.js.map